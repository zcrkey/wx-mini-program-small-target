"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../../utils/utils");
var target_init_1 = require("./target-init");
var target_init_2 = require("./target-init");
Page({
    data: {
        TARGET_LIST_DATA: [],
        TARGET_DETAILS_LIST_DATA: {}
    },
    init: function () {
        this.data.TARGET_LIST_DATA = target_init_1.TARGET_LIST_DATA;
        this.data.TARGET_DETAILS_LIST_DATA = target_init_2.TARGET_DETAILS_LIST_DATA;
    },
    onLoad: function () {
        this.init();
        this.getTargetListData();
        this.getTargetDetailsListData();
    },
    onPullDownRefresh: function () {
        var that = this;
        wx.stopPullDownRefresh({
            success: function () {
                that.getTargetListData();
                that.getTargetDetailsListData();
            }
        });
    },
    onShow: function () {
        this.getTargetListData();
        this.getTargetDetailsListData();
    },
    onClickClock: function (event) {
        var itemJson = JSON.stringify(event.currentTarget.dataset.item);
        var id = event.currentTarget.dataset.id;
        wx.navigateTo({
            url: '/pages/clock/clock?itemJson=' + itemJson + '&id=' + id
        });
    },
    getTargetListData: function () {
        try {
            var targetListData = wx.getStorageSync('TARGET_LIST_DATA');
            if (targetListData) {
                this.data.TARGET_LIST_DATA = targetListData;
                this.data.TARGET_LIST_DATA.forEach(function (item) {
                    item.hasDaysClock = false;
                    item.clockDate = "";
                    item.clockTime = "";
                });
                this.setData({
                    TARGET_LIST_DATA: this.data.TARGET_LIST_DATA
                });
            }
            try {
                wx.setStorageSync('TARGET_LIST_DATA', this.data.TARGET_LIST_DATA);
            }
            catch (e) { }
        }
        catch (e) {
            wx.showToast({
                title: '获取打卡目标数据失败，请稍后再试！',
                icon: 'none',
                duration: 1500
            });
        }
    },
    getTargetDetailsListData: function () {
        try {
            var targetDetailsListData_1 = wx.getStorageSync('TARGET_DETAILS_LIST_DATA');
            if (targetDetailsListData_1) {
                this.data.TARGET_DETAILS_LIST_DATA = targetDetailsListData_1;
                this.data.TARGET_LIST_DATA.forEach(function (item) {
                    if (targetDetailsListData_1[item.id] != null && targetDetailsListData_1[item.id].length > 0) {
                        var systemDate_1 = utils_1.Utils.getSystemDate();
                        var itemFind = targetDetailsListData_1[item.id].find(function (item) { return item.date == systemDate_1; });
                        if (!!itemFind) {
                            item.hasDaysClock = true;
                            item.clockDate = itemFind.date;
                            item.clockTime = itemFind.time;
                        }
                        item.finishDays = targetDetailsListData_1[item.id].length;
                    }
                    else {
                        item.finishDays = 0;
                    }
                });
                this.setData({
                    TARGET_LIST_DATA: this.data.TARGET_LIST_DATA,
                    TARGET_DETAILS_LIST_DATA: this.data.TARGET_DETAILS_LIST_DATA
                });
            }
            try {
                wx.setStorageSync('TARGET_LIST_DATA', this.data.TARGET_LIST_DATA);
                wx.setStorageSync('TARGET_DETAILS_LIST_DATA', this.data.TARGET_DETAILS_LIST_DATA);
            }
            catch (e) { }
        }
        catch (e) {
            wx.showToast({
                title: '获取打卡目标详情数据失败，请稍后再试！',
                icon: 'none',
                duration: 1500
            });
        }
    },
});
//# sourceMappingURL=data:application/json;base64,