"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Utils = (function () {
    function Utils() {
    }
    Utils.isPresent = function (obj) {
        return obj !== undefined && obj !== null;
    };
    Utils.toBoolean = function (value) {
        switch (value) {
            case "":
                return true;
            case "false":
            case "0":
                return false;
            default:
                return !!value;
        }
    };
    Utils.isDate = function (value) {
        return Object.prototype.toString.call(value) === "[object Date]";
    };
    Utils.isObject = function (value) {
        return Object.prototype.toString.call(value) === "[object Object]";
    };
    Utils.isArray = function (value) {
        return Object.prototype.toString.call(value) === "[object Array]";
    };
    Utils.isString = function (value) {
        return Object.prototype.toString.call(value) === "[object String]";
    };
    Utils.isNumber = function (value) {
        return Object.prototype.toString.call(value) === "[object Number]";
    };
    Utils.isEmpty = function (value, allowEmptyString) {
        if (allowEmptyString === void 0) { allowEmptyString = false; }
        return (value === null) || (value === undefined) ||
            (!allowEmptyString ? value === "" : false) || (Utils.isArray(value) && value.length === 0);
    };
    Utils.getSystemDate = function (type, date) {
        if (type === void 0) { type = "date"; }
        date = date ? date : new Date();
        return Utils.formatTime(date, type);
    };
    Utils.isDateSize = function (date1, date2) {
        if (!Utils.isNumber(date1)) {
            if (Utils.isDate(date1)) {
                date1 = Date.parse(date1);
            }
            else if (Utils.isString(date1)) {
                var newDate = new Date(date1);
                date1 = Date.parse(newDate);
            }
        }
        if (!Utils.isNumber(date2)) {
            if (Utils.isDate(date2)) {
                date2 = Date.parse(date2);
            }
            else if (Utils.isString(date2)) {
                var newDate = new Date(date2);
                date2 = Date.parse(newDate);
            }
        }
        return (date1 > date2) ? 1 : (date1 < date2) ? -1 : 0;
    };
    Utils.formatTime = function (date, type, dateSignTemp, timeSignTemp) {
        if (type === void 0) { type = "date"; }
        var dateSign = dateSignTemp ? dateSignTemp : "/";
        var timeSign = timeSignTemp ? timeSignTemp : ":";
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hour = date.getHours();
        var minute = date.getMinutes();
        var second = date.getSeconds();
        var dateFormat = "";
        if (type == "date") {
            dateFormat = [year, month, day].map(Utils.formatNumber).join(dateSign);
        }
        else if (type == "time") {
            dateFormat = [hour, minute, second].map(Utils.formatNumber).join(timeSign);
        }
        else if (type == 'timeHM') {
            dateFormat = [hour, minute].map(Utils.formatNumber).join(timeSign);
        }
        else if (type == "datetime") {
            dateFormat = [year, month, day].map(Utils.formatNumber).join(dateSign) + " " + [hour, minute, second].map(Utils.formatNumber).join(timeSign);
        }
        return dateFormat;
    };
    Utils.formatNumber = function (n) {
        var str = n.toString();
        return str[1] ? str : '0' + str;
    };
    return Utils;
}());
exports.Utils = Utils;
//# sourceMappingURL=data:application/json;base64,